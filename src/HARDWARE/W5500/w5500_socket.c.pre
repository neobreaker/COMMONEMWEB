#include "stm32f10x.h"	
#include "w5500_socket.h"
#include "ucos_ii.h"
#include "task_socket.h"
#include <string.h>

extern OS_EVENT* mbox_play_rcv;

static u8 s_socket_usage = 0;
static u8 s_socket_type[8];
	
int socket(int domain, int type, int protocol)
{
	int i;
	
	for(i = 0; i < 8; i++)
	{
		if((s_socket_usage & (1<<i)) == 0)
		{
			s_socket_usage |= (1<<i);
			break;
		}
	}
	if(i >= 8)
		return -1;
	
    switch (type)
    {
        case SOCK_RAW:
            break;
        case SOCK_DGRAM:
			W5500_Socket_UDP(i);
			s_socket_type[i] = SOCK_DGRAM;
            break;
        case SOCK_STREAM:
            break;
        default:
            return -1;
    }

    return i;
}

int bind(int s, const struct sockaddr_in *name, socklen_t namelen)
{
	int ret = 0;
	if(!((namelen == sizeof(struct sockaddr_in) 
		&& (name->sin_family) == AF_INET) ))
		return -1;
               
	W5500_Socket_Init(s, name->sin_port);

	switch(s_socket_type[s])
	{
	case SOCK_RAW:
        break;
    case SOCK_DGRAM:
		if(!W5500_Socket_UDP_Open(s))
			ret = -1;
        break;
    case SOCK_STREAM:
        break;
    default:
        return -1; 
	}
	
	return ret;
}

int sendto(int s, const void *data, u32 size, int flags,
            const struct sockaddr_in *to, socklen_t tolen)
{
	int snd_len = 0;

	Write_SOCK_Data_Buffer(s, (u8*)data, size, (u8*)&(to->sin_addr), to->sin_port);
		
	return snd_len;
}

int recvfrom(int s, void *mem, u32 len, int flags, struct sockaddr_in *from, socklen_t *fromlen)
{
	int rcv_len = 0;
	u8 err;
	rcv_pack_t *mail = NULL;
	
	mail = OSMboxPend(mbox_play_rcv, 0, &err);

	if(err == OS_ERR_NONE)
	{
		rcv_len = (mail->len > len) ? len : mail->len;
		
		memcpy(mem, mail->data, rcv_len);
	}

	return rcv_len;
}

/**
 * Convert an u16_t from host- to network byte order.
 *
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t htons(u16_t n)
{
  return ((n & 0xff) << 8) | ((n & 0xff00) >> 8);
}

/**
 * Convert an u16_t from network- to host byte order.
 *
 * @param n u16_t in network byte order
 * @return n in host byte order
 */
u16_t ntohs(u16_t n)
{
  return lwip_htons(n);
}

/**
 * Convert an u32_t from host- to network byte order.
 *
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t htonl(u32_t n)
{
  return ((n & 0xff) << 24) |
    ((n & 0xff00) << 8) |
    ((n & 0xff0000UL) >> 8) |
    ((n & 0xff000000UL) >> 24);
}

/**
 * Convert an u32_t from network- to host byte order.
 *
 * @param n u32_t in network byte order
 * @return n in host byte order
 */
u32_t ntohl(u32_t n)
{
  return lwip_htonl(n);
}

