#include "vs10xx_port.h"
#include "mysys.h"

u8 SPI3_ReadWriteByte(u8 TxData)
{
    u8 retry=0;
    while (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) == RESET) 
    {
        retry++;
        if(retry>200)return 0;
    }
    SPI_I2S_SendData(SPI3, TxData); 
    retry=0;

    while (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_RXNE) == RESET) 
    {
        retry++;
        if(retry>200)return 0;
    }
    return SPI_I2S_ReceiveData(SPI3); 
}

void SPI3_SetSpeed(u8 SpeedSet)
{
    assert_param(IS_SPI_BAUDRATE_PRESCALER(SPI_BaudRatePrescaler));
    SPI3->CR1&=0XFFC7;
    SPI3->CR1|=SpeedSet;
    SPI_Cmd(SPI3,ENABLE);
}

void vs10xx_spi_speedlow(void)
{
    SPI3_SetSpeed(SPI_BaudRatePrescaler_32);
}

void vs10xx_spi_speedhigh(void)
{
    SPI3_SetSpeed(SPI_BaudRatePrescaler_8);
}

u8 vs10xx_dq()
{
	return PCin(1);
}

void vs10xx_rst(u8 stat)
{
	PCout(0) = stat;
}

void vs10xx_xcs(u8 stat)
{
	PCout(3) = stat;
}

void vs10xx_xdcs(u8 stat)
{
	PCout(2) = stat;
}

void vs10xx_wait_dq()
{
	while(vs10xx_dq() == 0);
}

void vs10xx_spi_init(void)
{
    GPIO_InitTypeDef GPIO_InitStructure;
    SPI_InitTypeDef  SPI_InitStructure;

    RCC_APB2PeriphClockCmd( RCC_APB2Periph_GPIOC| RCC_APB2Periph_AFIO, ENABLE );
    RCC_APB1PeriphClockCmd( RCC_APB1Periph_SPI3, ENABLE );

	GPIO_PinRemapConfig(GPIO_Remap_SWJ_JTAGDisable,ENABLE);	//SWD

    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_5;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP; 
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(GPIOB, &GPIO_InitStructure);

	GPIO_ResetBits(GPIOB,GPIO_Pin_3|GPIO_Pin_4|GPIO_Pin_5); 
    GPIO_SetBits(GPIOB,GPIO_Pin_3|GPIO_Pin_4|GPIO_Pin_5); 
    
    
    SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;  
    SPI_InitStructure.SPI_Mode = SPI_Mode_Master;       
    SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;   
    SPI_InitStructure.SPI_CPOL = SPI_CPOL_High;     
    SPI_InitStructure.SPI_CPHA = SPI_CPHA_2Edge;    
    SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;       
    SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_256;       
    SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB; 
    SPI_InitStructure.SPI_CRCPolynomial = 7;    
    SPI_Init(SPI3, &SPI_InitStructure);  

    SPI_Cmd(SPI3, ENABLE); 

}

void vs10xx_init()
{
    GPIO_InitTypeDef  GPIO_InitStructure;

    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);  //??PC,PE,PF????

    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1;               //PC13
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;        //??
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(GPIOC, &GPIO_InitStructure);
	
	  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0|GPIO_Pin_2|GPIO_Pin_3;    //RST XDCS XCS
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;         
    GPIO_Init(GPIOC, &GPIO_InitStructure);
	
    vs10xx_spi_init();
}

void vs10xx_cfg_setup(vs10xx_cfg_t* g_vs10xx_cfg)
{
    g_vs10xx_cfg->VS_Init				= vs10xx_init;
	g_vs10xx_cfg->VS_SPI_ReadWriteByte 	= SPI3_ReadWriteByte;
	g_vs10xx_cfg->VS_SPI_SpeedLow      	= vs10xx_spi_speedlow;
	g_vs10xx_cfg->VS_SPI_SpeedHigh 	   	= vs10xx_spi_speedhigh;
	g_vs10xx_cfg->VS_WAIT_DQ			= vs10xx_wait_dq;
	g_vs10xx_cfg->VS_DQ					= vs10xx_dq;
	g_vs10xx_cfg->VS_RST				= vs10xx_rst;
	g_vs10xx_cfg->VS_XCS				= vs10xx_xcs;
	g_vs10xx_cfg->VS_XDCS				= vs10xx_xdcs;

	if(g_vs10xx_cfg->VS_Init)
		g_vs10xx_cfg->VS_Init();
}

